建表   数据类型  索引  外键   主键    存储引擎  事务  特点ACID       
管理表记录：  select  insert  update   delete
                     单表  多表（嵌套  连接  左右连接）
用户授权和权限撤销：  grant     revoke    mysql库
数据备份与恢复：  mysqldump   binlog日志     percona(innobackupex)
图形管理工具： phpmyadmin   naivcate

DBA2_进阶
主从同步
数据读写分离  maxscale + 主从同步
高可用集群     MHA+ 主从同步
数据分片        mycat +  数据服务器
MySQL优化  （网络连通性   软件本身   程序员   网络架构）
MySQL视图  及  存储过程

NoSQL软件服务
Redis  集群   主从  数据的基本管理    持久化AOF  RDB
MongoDB  副本集    数据的基本管理   备份与恢复 





##############################################################################################

介于关系数据库和非关系数据库之间的产品
– 一个基于分布式文件存储的数据库。
– 由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高
性能数据存储解决方案。
– MongoDB 将数据存储为一个文档,数据结构由键值
(key=>value) 对组成。
– MongoDB 文档类似于 JSON 对象。字段值可以包
含其他文档,数组及文档数组。

优点：
– 安装简单
– 面向文档存储,操作比较简单容易
– 支持丰富的查询表达
– 可以设置任何属性的索引
– 支持主流编程语言 RUBY|PYTHON|JAVA|PHP|C++
– 支持副本集,分片

mongodb的搭建

]#mkdir -p /usr/local/mongodb
]#tar -zxvf mongodb-linux-x86_64-rhel70-3.6.3.tgz 
]#cp -r  mongodb-linux-x86_64-rhel70-3.6.3/bin/     /usr/local/mongodb/

]#cd /usr/local/mongodb/
]#mkdir  etc   logs   
]#mkdir  data/db                               
]#vim /etc/profile
export  PATH=/usr/local/mongodb/bin:$PATH
:wq
]#source /etc/profile
]#echo  $PATH


编写服务的配置文件
vim  /usr/local/mongodb/etc/mongodb.conf
logpath=/usr/local/mongodb/logs/mongodb.log
logappend=true                                    # 追加的方式记录日志信息
dbpath=/usr/local/mongodb/data/db                 # 数据库目录
fork=true                                         # 守护进程方式运行      
bind_ip=192.168.4.51
port=27051

启动服务
mongod  -f    /usr/local/mongodb/etc/mongodb.conf   可做一个别名

ps -C  mongod
netstat  -utnlp  | grep  -i  mongod

停止服务
mongod  -f    /usr/local/mongodb/etc/mongodb.conf  --shutdown

连接服务
mongo --host 192.168.4.51 --port 27051


常用管理命令：    
(库)	库的管理命令：  show dbs    db   db.dropDatabase()    show tables   use     
		– 不能是空字符串( "") 。
		– 不得含有 ' ' (空格 ) 、 . 、 $ 、 / 、 \ 和 \0 ( 空字符 )。
		– 应全部小写。
		– 最多 64 字节。

(表)	集合的管理名:   show tables  db. 集合名 .drop()  db. 集合名 .save({'',''})   
		– 集合名不能是空字符串 "" 。
		– 集合名不能含有 \0 字符(空字符 ) ,这个字符表示集合名的结尾。
		– 集合名不能以 "system." 开头,这是为系统集合保留的前缀。
		– 用户创建的集合名字不能含有保留字符。
	
(字段)	文档的管理命令: 
		– db. 集合名 .find()
		– db. 集合名 .count()
		– db. 集合名 .insert({“name”:”jim”})
		– db. 集合名 .find({ 条件 })
		– db. 集合名 .findOne() # 返回一条文档
		– db. 集合名 .remove({}) # 删除所有文档
		– db. 集合名 .remove({ 条件 }) # 删除与条件匹配的所有文档

mongodb数据类型：
– 字符串类型
– 数值类型
– 布尔类型
– 空 / 正则 / 代码
– 数组
– 数值
– 日期
– 对象
– 内嵌

数据导出 : 把集合里的文档存储到系统文件里
]# mongoexport  --help
]# mkdir /mbak
]# mongoexport  --host  192.168.4.51  --port 27051  -d bbsdb  -c  c2  -f  name,school  --type=csv  > /mbak/c2.csv

]# mongoexport  --host  192.168.4.51  --port 27051  -d bbsdb  -c  c2   --type=json  > /mbak/c2.json

注意:导出为 csv 格式必须使用 -f 指定字段名列表 !!!       -q  ‘{条件}’

数据导入：把系统文件的内容存储到集合里
]# mongoimport --help

]# mongoimport     --host  192.168.4.51  --port 27051  -d  gamedb   -c  col  --type=json   /mbak/c2.json

]# mongoimport     --host  192.168.4.51  --port 27051  -d  gamedb   -c  stu --headerline  --type=csv   /mbak/c2.csv

]# mongoimport     --host  192.168.4.51  --port 27051  -d  gamedb   -c  tea  -f name , school  --type=csv   /mbak/c2.csv

]# mongoimport     --host  192.168.4.51  --port 27051  -d  gamedb   -c  tea  -f name , school  --type=csv   --drop  /mbak/c2.csv

注意:导入数据时库和集合不存在时,会创建库和集合后导入数据
反之以追加的方式导入数据到集合里,使用— drop 选项可以删除原有数据后
导入新数据 --headerline 忽略标题



把系统用户信息 (/etc/passwd ) 存储到 mongodb服务器 
userdb库下coluser集合里。  

> use  userdb
> db.coluser.save({
... name:"yaya",
... password:"x",
... uid:1,
... gid:1,
... comment:"my teacher",
... homedir:"/home/yaya",
... shell:"/bin/bash"
... })
>db.coluser.find();

]# mongoexport --host 192.168.4.51  --port 27051   -d userdb  -c  coluser  -f name,password,uid,gid,comment,homedir,shell  --type=csv  > /mbak/coluser.csv

]# cat  /mbak/coluser.csv
]# cp /etc/passwd /mbak/
]# sed -i 's/:/,/g' passwd 
]# cat passwd
]# cd  /mbak
]# sed -i  '2r passwd'  coluser.csv

]# mongoimport  --host  192.168.4.51  --port 27051  -d userdb  -c  coluser  --headerline --drop  --type=csv /mbak/coluser.csv

> db.coluser.find()



数据备份
备份数据所有库到当前目录下的 dump 目录下
]# pwd
]# mongodump --host 192.168.4.51 --port 27051
]# ls  dump

]# cd /opt
]# mongodump --host 192.168.4.51 --port 27051 -d userdb
]# ls  dump/userdb

备份时指定备份的库和备份目录    -d    -o        目录无需事先创建 备份时指定即可!!!

]# mongodump --host 192.168.4.51 --port 27051 -d gamedb  -c  stu  -o /bak1
]# ls  /bak1

数据恢复
>  use  gamedb
>  db.stu.remove({})

]# mongorestore --host 192.168.4.51  --port 27051 -d gamedb -c  stu  /bak1/gamedb/stu.bson 
>  use  gamedb
>  db.stu.count()

]#mongorestore --host 192.168.4.51  --port 27051 -d buydb -c  regtab  /bak1/gamedb/stu.bson 
>  use  buydb
>  db.regtab.count()



查看 bson 文件内容
#bsondump ./dump/bbs/t1.bson



MongoDB 副本集

• 副本集是什么
– MongoDB 复制是将数据同步在多个服务器的过程。
– 复制提供了数据的冗余备份,并在多个服务器上存储数据副本,提高了数据的可用性, 并可以保证数据的安全性。
– 复制还允许您从硬件故障和服务中断中恢复数据

• 副本集工作过程（复制原理）
– mongodb 的复制至少需要两个节点。其中一个是主节点,负责处理客户端请求,其余的都是从节点,负责复制主节点上的数据。
– mongodb 各个节点常见的搭配方式为: 一主一从、一主多从。
– 主节点记录在其上的所有操作 oplog ,从节点定期轮询主节点获取这些操作,然后对自己的数据副本执行这些操作,从而保证从节点的数据与主节点一致。

副本集实现方式
一：
• Master-Slave 主从复制
– 实现数据同步只需要在某一台服务器启动时加上 "-master" 参数,以指明此服务器的角色是 primary ;另一台服务器加上 "-slave" 和 "-source" 参数,以指明此服务器的角色是 slave 。
• 主从复制的优点如下:
– 从服务器可以执行查询工作,降低主服务器访问压力。
– 在从服务器执行备份,避免备份期间锁定主服务器的数据。
– 当主服务器出现故障时,可以快速切换到从服务器,减少宕机时间。

二：（现在多使用）
• Replica Sets 复制集
– MongoDB 在 1.6 版本对开发了新功能 replica set,这比之前的 replication 功能要强大一些,增加了故障自动切换和自动修复成员节点,各个 DB 之间数据完全一致,大大降低了维护成功。使用 replica set故障切换完全自动。
– Replica Sets 的结构类似一个集群,完全可以把它当成一个集群,因为它确实与集群实现的作用是一样的 : 如果其中一个节点出现故障,其他节点马上会将业务接管过来而无须停机操作


配置Replica Sets副本集：

1、启用副本集
]#vim  /usr/local/mongodb/etc/mongodb.conf
...
...
replSet=rs1

[root@server0 ~]# ./mongo --host     --port  
config = {
_id:"rs1",
members:[
{_id:0,host:“IP 地址 : 端口 "},
{_id:1,host:“IP 地址 : 端口 "},
{_id:2,host:“IP 地址 : 端口 "}
]
};

eg：
mongo   --host   192.168.4.51  --port  27051

config = {
_id:"rs1", 
members:[
    {_id:0,host:"192.168.4.51:27051"},
    {_id:1,host:"192.168.4.52:27052"},
    {_id:2,host:"192.168.4.53:27053"}
           ] 
           };

初始化：
 > rs.initiate(config)

查看状态信息
 > rs.status( )

查看是否是 master 库
 > rs.isMaster( )

测试同步功能
>db.getMongo( ).setSlaveOk( ) 允许从库查看数据




文档管理：

插入文档
	save()
	insert()

查询文档
	查询语法
	行数显示限制
	匹配条件

更新文档
	update()
	多文档更新
	$set / $unset
	$inc
	$push / $addToSet
	$pop /$pull

删除文档
	drop()
	remove( )





























































































