一、UDEV：动态管理设备文件的方法
1、将虚拟机vdb硬盘的权限从默认的660改为664
[root@localhost ~]# vim /etc/udev/rules.d/90-vdisk.rules
ACTION=="add", KERNEL=="vdb", MODE="664", OWNER="root", GROUP="root"
说明：匹配条件用==，赋值用=。
ACTION=="add"意思是添加新设备。UDEV规则是在设备连接到系统或移除的时候生效。
KERNEL=="vdb"意思是，没有人为干预，内核识别出来的设备名。
MODE="664"表示赋值，权限改为664
重启系统，测试规则是否生效。
2、继续修改，对于vdb和它的分区，要创建快捷方式叫vdisk*
[root@localhost ~]# vim /etc/udev/rules.d/91-vdisk2.rules
ACTION=="add", KERNEL=="vdb[1-9]", SYMLINK+="vdisk%n"
说明：SYMLINK表示创建软链接；+=表示额外创建；%n表示分区号
3、查看设备属性
（1）查看设备文件在/sys/目录下的路径
[root@localhost ~]# udevadm info --query=path --name=/dev/vdb1   输出如下：
/devices/pci0000:00/0000:00:0c.0/virtio7/block/vdb/vdb1
（2）根据输出的路径查看vdb1的所有属性
[root@localhost ~]# udevadm info --query=all --attribute-walk --path=/devices/pci0000:00/0000:00:0c.0/virtio7/block/vdb/vdb1



ip命令
ip addr 
ip addr ls dev eth0
添加ip地址：
[root@rs1 ~]# ip addr add dev eth0 192.168.5.11/24
删除ip地址：
[root@rs1 ~]# ip addr del dev eth0 192.168.5.11/24
查看链路层的信息：
[root@rs1 ~]# ip link 

添加一个虚拟网络设备：
[root@rs1 ~]# ip link add veth-a type veth peer veth-b
给虚拟网卡设置ip地址：
[root@rs1 ~]# ip a a dev veth-a 192.168.4.101/24
让eth0网卡不对arp请求做应答：
[root@rs1 ~]# echo 1 > /proc/sys/net/ipv4/conf/eth0/arp_ignore
[root@rs1 ~]# echo 2 > /proc/sys/net/ipv4/conf/eth0/arp_announce 
删除arp缓存表条目：
[root@ds ~]# arp -d 192.168.4.101


LVS-DR

Director的配置
1. 配置vip
[root@ds ~]# ip a a dev eth2 201.1.1.101/24
2. 添加虚拟服务器
[root@ds ~]# ipvsadm -C
[root@ds ~]# ipvsadm -A -t 201.1.1.101:80 -s rr
3. 添加真实服务器
[root@ds ~]# ipvsadm -a -t 201.1.1.101:80 -r 201.1.1.102 -g
[root@ds ~]# ipvsadm -a -t 201.1.1.101:80 -r 201.1.1.103 -g

Real Server的配置：
1.在lo设备上配置vip
[root@rs1 ~]# ip a a dev lo 201.1.1.101/32
2. 禁用arp请求
[root@rs1 ~]# echo 1 > /proc/sys/net/ipv4/conf/all/arp_ignore
[root@rs1 ~]# echo 2 > /proc/sys/net/ipv4/conf/all/arp_announce 

arp_ignore参数的作用是控制系统在收到外部的arp请求时，是否要返回arp响应。
0：响应任意网卡上接收到的对本机IP地址的arp请求（包括环回网卡上的地址），而不管该目的IP是否在接收网卡上。
1：只响应目的IP地址为接收网卡上的本地地址的arp请求。

arp_announce的作用是控制系统在对外发送arp请求时，如何选择arp请求数据包的源IP地址。
arp_announce参数常用的取值有0，1，2。
0：允许使用任意网卡上的IP地址作为arp请求的源IP。
1：尽量避免使用不属于该发送网卡子网的本地地址作为发送arp请求的源IP地址。
2：忽略IP数据包的源IP地址，选择该发送网卡上最合适的本地地址作为arp请求的源IP地址。


客户端与集群之间有网关
集群是公有地址，网关的作用是转发：
client  ---201.1.2.254(router)201.1.1.254 ----  lb

real server修改网关：
[root@rs2 ~]# nmcli connection modify eth2 ipv4.method manual ipv4.gateway 201.1.1.254 connection.autoconnect yes
[root@rs2 ~]# nmcli connection modify eth0 ipv4.method manual ipv4.gateway 0.0.0.0 connection.autoconnect yes
[root@rs2 ~]# nmcli connection up eth2
[root@rs2 ~]# nmcli connection up eth0
[root@rs2 ~]# route -n

[root@room9pc01 nsd1804]# iptables -F FORWARD

如果集群使用私有地址，网关的作用是nat
删除client网关：
[root@client ~]# route del default
在路由器上添加规则：
[root@room9pc01 ~]# iptables -t nat -F
[root@room9pc01 ~]# iptables -t nat -A PREROUTING -d 201.1.2.254 -p tcp --dport 80 -j DNAT --to 201.1.1.101 
[root@room9pc01 ~]# iptables -t nat -A POSTROUTING -s 201.1.1.0/24 -j SNAT --to 201.1.2.254
[root@client ~]# curl 201.1.2.254



  keepalived + lvs-DR：   两台ds和两台rs做以上操作，删除ds上的 vip 以及 ipvsadm规则，  然后装包，修改keepalived配置，启动服务。 主 配置文件如下



global_defs {
  notification_email {
    admin@tarena.com.cn                //设置报警收件人邮箱
  }
  notification_email_from ka@localhost    //设置发件人
  smtp_server 127.0.0.1                //定义邮件服务器
  smtp_connect_timeout 30
  router_id  lvs1                        //设置路由ID号(实验需要修改)
}
vrrp_instance VI_1 {
  state MASTER                             //主服务器为MASTER（实验需要修改）
  interface eth0                        //定义网络接口（实验需要修改）
  virtual_router_id 50                    //主辅VRID号必须一致（实验需要修改）
  priority 100                         //服务器优先级（实验需要修改）
  advert_int 1
  authentication {
    auth_type pass
    auth_pass forlvs                       //主辅服务器密码必须一致（实验需要修改）
  }
  virtual_ipaddress {  192.168.4.5  }   //配置VIP（实验需要修改）
}
virtual_server 192.168.4.5 80 {       //设置ipvsadm的VIP规则（实验需要修改）
  delay_loop 6
  lb_algo wrr                          //设置LVS调度算法为WRR
  lb_kind DR                               //设置LVS的模式为DR
  #persistence_timeout 1
  protocol TCP
  real_server 192.168.4.10 80 {          //设置后端web服务器真实IP（实验需要修改）
    weight 1                             //设置权重为1
    TCP_CHECK {
    connect_timeout 3
    nb_get_retry 3
    delay_before_retry 3
    }
  }
 real_server 192.168.4.20 80 {        //设置后端web服务器真实IP（实验需要修改）
    weight 2                          //设置权重为2
    TCP_CHECK {
    connect_timeout 3
    nb_get_retry 3
    delay_before_retry 3
    }
  }
[root@proxy1 ~]# systemctl start keepalived
[root@proxy1 ~]# ipvsadm -Ln                     #查看LVS规则
[root@proxy1 ~]# ip a  s                          #查看VIP配置


健康检测测试：
停掉其中一个real server的httpd服务
HA的测试：
停掉主服务的keepalived服务

vip配置成不抢占，修改配置文件
state BACKUP
nopreempt
curl http://201.1.1.101
debug:
1. ping 201.1.1.101
2.  在ds服务器，ipvsadm -ln,如果看不到规则，则：
   1)  检查keepalived配置文件
   2）检查real server的httpd服务是否启动
3. 检查real server是否绑定了vip，以及是否调整了内核参数



haproxy

装包配置起服务

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
listen stats
    bind 0.0.0.0:1080   #监听端口
    stats refresh 30s   #统计页面自动刷新时间
    stats uri /stats   #统计页面url
    stats realm Haproxy Manager #统计页面密码框上提示文本
    stats auth admin:admin  #统计页面用户名和密码设置
  #stats hide-version   #隐藏统计页面上HAProxy的版本信息
listen  websrv-rewrite 0.0.0.0:80
   cookie  SERVERID rewrite
   balance roundrobin    #算法类型
   server  web1 192.168.20.101:80 cookie app1inst1 check inter 2000 rise 2 fall 5
   server  web2 192.168.20.102:80 cookie app1inst2 check inter 2000 rise 2 fall 5


keepalived + haproxy   : 

global_defs {
  notification_email {
    admin@tarena.com.cn                //设置报警收件人邮箱
  }
  notification_email_from ka@localhost    //设置发件人
  smtp_server 127.0.0.1                //定义邮件服务器
  smtp_connect_timeout 30
  router_id  lvs1                        //设置路由ID号(实验需要修改)
}
vrrp_instance VI_1 {
  state MASTER                             //主服务器为MASTER（实验需要修改）
  interface eth0                        //定义网络接口（实验需要修改）
  virtual_router_id 50                    //主辅VRID号必须一致（实验需要修改）
  priority 100                         //服务器优先级（实验需要修改）
  advert_int 1
  authentication {
    auth_type pass
    auth_pass forlvs                       //主辅服务器密码必须一致（实验需要修改）
  }
  virtual_ipaddress {  192.168.4.5  }   //配置VIP（实验需要修改）
}



通过脚本对haproyx做健康检查：
cat check_haproxy_status.sh 
#!/bin/bash
curl -I localhost &> /dev/null
if [ $? -ne 0 ];then
	systemctl stop keepalived
fi

vim /etc/keepalived/keepalived.conf
! Configuration File for keepalived

global_defs {
   router_id ds1
}
vrrp_script check_haproxy {
    script "/etc/keepalived/check_haproxy_status.sh"
    interval 5
}
vrrp_instance VI_1 {
    state BACKUP
  .........
  .........
    track_script {
        check_haproxy
        }
}
















